## Key Concepts and Parts of Git

    Repository (Repo): The directory that contains your project files and the entire history of changes. You‚Äôll have a local repository on your machine and often a remote repository hosted on GitHub.
    Commit: A snapshot of your project at a specific point in time. Each commit records what changed, who made the change, and when.
    Branch: A parallel version of your codebase. Branches are used to develop features, fix bugs, or experiment without affecting the main (production) code.
    Main (or Master) Branch: The primary branch that holds production-ready code. All stable releases are merged here.
    Feature/Topic Branch: Created from the main or develop branch to work on new features or bug fixes. Once complete, these are merged back.
    Merge: The process of integrating changes from one branch into another, often from a feature branch into main.
    Merge Conflict: Occurs when changes in different branches clash. You must resolve these conflicts manually before merging.
    Staging Area: Where you prepare changes before committing them, using git add.
    Remote: The version of your repository hosted on GitHub or another server. You push changes to and pull updates from remotes.

## Concepts
  
## üü¢ **Commits**

* A **commit** saves a snapshot of your project history.
* Each commit has a message describing what changed.
* Each commit has a hash key.
        git commit -m "Add info"
> Commits only apply staged files.

-----------------------------------------------------------------------

## üü° **Staging**

* The **staging area** lets you choose which changes to include in the next commit.

        git add file.js     # Add one file
        git add .           # Add all changes
        git status          # See what's staged and not
> Think of it as a "preview before saving."

-----------------------------------------------------------------------

## üîÄ **Branches**

* **Branches** isolate work (e.g., for features or fixes).
* `main` (or `master`) is the default primary branch.

        git checkout -b new-feature  # Create + switch to branch
        git checkout main            # Switch back to main

> Each branch can be worked on independently.

-----------------------------------------------------------------------

## üîç **Checking (status, logs, diffs)**

* **Check what's happening** in your repo:


        git status                  # What's modified/staged?
        git log                     # History of commits
        git diff                    # What‚Äôs changed (unstaged)?
        git show <hash Value>       # All changes on a specific commit with its Value

        git reflog                  # shows all changes in all branches withn all commits in the project


-----------------------------------------------------------------------

## üì§ **Push & üì• Pull**

* **Push** = send your commits to GitHub.
* **Pull** = get the latest changes from GitHub.


        git push origin main
        git pull origin main

> Use `git fetch` if you only want to see what's changed before merging.

-----------------------------------------------------------------------

## ‚Ü©Ô∏è **Undoing & Redoing**

* **Unstage** a file:

        git reset HEAD file.js
        git reset <Hash Value of a commit>  # Resets to that commit and disregards all other commits after it.

* **Undo last commit but keep changes:**

        git reset --soft HEAD~1

* **Discard changes to file:**


        git checkout -- file.js


* **Stash temporary changes:**

        git stash           # Save work temporarily
        git stash pop       # Restore it later

-----------------------------------------------------------------------

## üîÅ **Merging & Conflict Resolution**

* **Merge** a branch into another:


        git checkout main
        git merge feature-branch

* **Conflict?**

  * Git marks conflict areas in files.
  * Manually fix, then:


        git add resolved-file.js
        git commit

> Use GitHub Pull Requests for safer, reviewed merges.

